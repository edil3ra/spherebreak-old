* Coin
** models
*** CoreCoin
**** type alias
    number: Int
**** description
   + main coin
   + the number that the player must obtained in order to earn points
   + unique, it can only have one coreCoin
   + randomly change every turn
   + center of the game
*** EntryCoin alias
**** type alias
    number: Int
	hitted: Bool
**** descrpiton
   + number cannot be change
   + used in order to to reach the CoreCoin number
   + die after used
   + reset after the turn is over
   + middle of the game
*** BorderCoin
**** type alias
    number: Int
	hitted: Bool 
    alive: Bool
    counter: Int
**** description
   + border of the game
   + used in order to reach the CoreCoin number
   + die after used
   + reset after the counter has reach a given number
   + die if the number is greater than a given number
   + border of the game
*** Coin
**** model
	 Core CoreCoin
	 Entry EntryCoin
	 Border BorderCoin
**** description
   + the Coin model will be used for all interection with core entry and border coin
**** functions
	 value -> Coin -> Int
	 alive -> Coin -> Bool
	 counter -> Coin -> Maybe Int
     hitted -> Coin -> Boolean

	 set -> Int -> Coin -> Coin
	 kill -> Coin -> Coin
	 revive -> Coin -> Coin
	 hit -> Coin -> Coin
	 unhit -> Coin -> Coin
     
	 

*** Coins
**** model type alias
     List  Coin
**** description
   + The list of coin will represend the bord of the game
**** functions
	 core Coins -> CoreCoin
	 entries Coins -> EntriesCoin
	 borders Coins -> BorderCoins
     get Coins -> Coin -> Coins
     set Coins -> Coin -> Coins
     

* Player
** models
*** Combo type
    type Combo =
    Multiple Int
    Count
    

*** Player alias
  hand: List Int
  goal: Int
  point: Int
  compboPrevious: Combo
  comboCurrent: Combo
  comboLength: Int


** functions
  + addHand -> number -> Player (add number to hand)
  + isReachingGoal -> Player -> Bool
  + resetHand -> Player (empty hand)
  + calculatePoint -> Player 
    
* Main
** models
*** difficultly Type
    easy
    medium
    hard  

*** model alias
    difficutly: Difficulty
    coins: Coins
    player: Player
    goal: Int
    currentTurn: Int
    maxTurn: Int
    currentTime: Int
    maxTime: Int

** actions 
*** commands
   + Noop
   + Random (get a random number)
   + Win
     + when :: player.point >= goal
     + trigger reset

   + Lose
     + when :: currentTurn >= maxTurn
     + trigger reset

   + Reset 
     + when :: Lose || Win
     + reset borders counter
     + randomize the borders

   + NextTurn 
     + when :: currentTime >= maxTime || Hit Coin
       + increment bordersCell counter
       + increment bordersCell number
       + kill bordersCell >= max_number
       + revive bordersCell >= max_counter
       + randomize bordersCell >= max_counter
       + randomize CoreCoin
       + incrementCurrentTurn
       + reset the currentTime
     + when :: currentTurn >= maxTurn
       + trigger Lose        

   + Hit Coin 
     + when :: coin is dead
       + Nopp 
     + when :: coin is alive
       + add number in the hand player
       + kill the coin
       + when :: sum player == factor of core coin
         + addPoint to player
         + when :: player.point >= goal
           trigger Win


*** subscriptions
   + Time
   + when :: every seconds
     increment currentTime

* Board
  drawCoins -> alive -> number -> Msg -> Html Msg
  drawInfoPlayer -> currentTime -> currentTurn -> comboType -> Html Msg
  drawInfoGame -> maxTime -> maxTurn -> difficutly -> goal -> Html Msg
  
